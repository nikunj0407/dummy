<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd
    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">
	<import resource="jdbcTemplate.xml" />
	<!-- 1) USE ANNOTATIONS TO CONFIGURE SPRING BEANS -->
	<context:component-scan base-package="com.bnp.ivision.common" />
	<!-- 2) TRANSACTION MANAGER AND JOB EXECUTOR  -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="jobExecutor" class="com.bnp.ivision.common.job.DomusExecutor" />
	<!-- 3) JOB REPOSITORY - WE USE IN-MEMORY REPOSITORY FOR OUR EXAMPLE -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	<!-- 4) LAUNCH JOBS FROM A REPOSITORY -->
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	<!--
		5) Define the job and its steps. In our case used one step. Configure
		its readers and writers
	-->
	<batch:job id="domus">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="DomusCursorItemReader" processor="DomusProcessor"
					writer="DomusCursorItemWriter" commit-interval="1000">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="appJobListener" />
		</batch:listeners>
	</batch:job>
	<!--  6) LISTENER -->
	<bean id="appJobListener"
		class="com.bnp.ivision.common.listeners.AppJobExecutionListener">
	</bean>
	<!--  7) READER -->
	<bean id="DomusCursorItemReader"
		class="com.bnp.ivision.common.readers.domus.DomusCursorItemReader">
		<property name="dataSource" ref="dataSource" />
		<property name="procedureName" value="" />
		<property name="rowMapper">
			<bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
				<property name="mappedClass"
					value="com.bnp.ivision.common.dataobjects.domus.DomusBean"></property>
			</bean>
		</property>
	</bean>
	<!-- 8) PROCESSOR -->
	<bean id="DomusProcessor" class="com.bnp.ivision.common.processors.domus.DomusProcessor" />
	<!--9) WRITER-->
	<bean id="domusWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:${OUTPUT_FILE}" />
		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="-" />
			</bean>
		</property>
		<property name="footerCallback" ref="DomusCursorItemWriter" />
		<property name="headerCallback" ref="DomusCursorItemWriter" />
	</bean>
	<bean id="DomusCursorItemWriter"
		class="com.bnp.ivision.common.writers.domus.DomusCursorItemWriter">
		<property name="delegate" ref="domusWriter" />
	</bean>
</beans>

